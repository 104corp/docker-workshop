(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{367:function(n,t,e){"use strict";e.r(t);var a=e(42),r=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"run-command"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run-command"}},[n._v("#")]),n._v(" Run Command")]),n._v(" "),e("p",[n._v("練習此題，可以了解：")]),n._v(" "),e("ul",[e("li",[n._v("如何在 "),e("code",[n._v("docker run")]),n._v(" 指令，直接對 container 下指令")]),n._v(" "),e("li",[n._v("如何「進入」container，並處理裡面的設定與檔案等")]),n._v(" "),e("li",[n._v("Container 的「一次性」特性")])]),n._v(" "),e("h2",{attrs:{id:"指令練習"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指令練習"}},[n._v("#")]),n._v(" 指令練習")]),n._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 查看不同版本的 image 的程式版本")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" run --rm -it php:7.3-alpine php -v\n"),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" run --rm -it php:7.4-alpine php -v\n"),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" run --rm -it node:10-alpine "),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("node")]),n._v(" -v\n"),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" run --rm -it node:12-alpine "),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("node")]),n._v(" -v\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 啟動 nginx")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" container run -d --name my-web -p "),e("span",{pre:!0,attrs:{class:"token number"}},[n._v("8080")]),n._v(":80 nginx:alpine\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 另外開 terminal")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 「進入」nginx container")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" container "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v("exec")]),n._v(" -it my-web "),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("bash")]),n._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 在 nginx container 裡存入一個新的 html 檔")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 存之前與存之後可以查看 http://localhost:8080/my-web.html 網址內容")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v("echo")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"hello world"')]),n._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v(" /usr/share/nginx/html/my-web.html\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 離開 container 並移除")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" container "),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("rm")]),n._v(" -f my-web\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 重新啟動 nginx")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" container run -d --name my-web -p "),e("span",{pre:!0,attrs:{class:"token number"}},[n._v("8080")]),n._v(":80 nginx:alpine\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 查看 http://localhost:8080/my-web.html 網址內容")]),n._v("\n")])])]),e("p",[n._v("在這個練習題目會發現，第一次進入 Nginx container 修改的內容，在重新啟動 Nginx 後會全部消失。這代表 container 是一次性的（disposable）。")]),n._v(" "),e("p",[n._v("這個特性對開發或測試而言是好的體驗，類似電腦壞了就重開機解決，環境壞了就砍掉重練。但維運就不一定如此，在具備非一次性的環境管理經驗前提下，這個特性遇到大量佈署情境時，將會面臨一些問題：")]),n._v(" "),e("ul",[e("li",[n._v("客製化設定檔（如 "),e("code",[n._v("nginx.conf")]),n._v("）在重啟 container 後，將會消失")]),n._v(" "),e("li",[n._v("程式檔每次啟動 container 時，都需要再次佈署程式")]),n._v(" "),e("li",[n._v("環境設定如 IP，都是在啟動 container 的時候，才會知道的，該如何配置這些設定？")])]),n._v(" "),e("p",[n._v("這些問題在後續練習中，將會慢慢知道該如何解決。目前的練習，先了解 container 具備這樣的特性即可。")]),n._v(" "),e("h2",{attrs:{id:"指令說明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指令說明"}},[n._v("#")]),n._v(" 指令說明")]),n._v(" "),e("h3",{attrs:{id:"docker-container-run"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-container-run"}},[n._v("#")]),n._v(" "),e("code",[n._v("docker container run")])]),n._v(" "),e("ul",[e("li",[e("code",[n._v("--rm")]),n._v(" 當 container 主程序一結束時，立刻移除 container")])]),n._v(" "),e("blockquote",[e("p",[e("strong",[n._v("注意")]),n._v("："),e("code",[n._v("--rm")]),n._v(" 與 "),e("code",[n._v("-d|--detach")]),n._v(" 兩個選項是互相衝突的。")])]),n._v(" "),e("h3",{attrs:{id:"docker-container-exec"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-container-exec"}},[n._v("#")]),n._v(" "),e("code",[n._v("docker container exec")])]),n._v(" "),e("p",[n._v("在執行中的 container 上，執行新的指令。")]),n._v(" "),e("blockquote",[e("p",[n._v("參數 "),e("code",[n._v("-i")]),n._v(" 與 "),e("code",[n._v("-t")]),n._v("，跟 "),e("code",[n._v("docker container run")]),n._v(" 的意義完全相同。")])]),n._v(" "),e("h2",{attrs:{id:"總結"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#總結"}},[n._v("#")]),n._v(" 總結")]),n._v(" "),e("p",[n._v("配合 "),e("RouterLink",{attrs:{to:"/docs/exercises/exercises-03-port-forwarding.html"}},[n._v("Port Forwarding")]),n._v(" 所提到的隔離特性，加上今天的練習，我們可以想像 Docker 可以做到以下應用：")],1),n._v(" "),e("ul",[e("li",[n._v("隨時切換不同的環境，執行想要測試的指令")]),n._v(" "),e("li",[n._v("可同時在不同環境下測試，而它們各自的狀態都會是互相隔離的")])]),n._v(" "),e("h2",{attrs:{id:"references"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[n._v("#")]),n._v(" References")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://hub.docker.com/_/nginx",target:"_blank",rel:"noopener noreferrer"}},[n._v("Nginx image"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://hub.docker.com/_/php",target:"_blank",rel:"noopener noreferrer"}},[n._v("PHP image"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);